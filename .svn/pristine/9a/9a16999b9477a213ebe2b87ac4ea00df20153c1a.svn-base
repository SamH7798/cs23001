#include "utilities.hpp"
#include "../string/string.hpp"
#include <iostream>
#include <fstream>

void toPostfix(std::ifstream& in, std::ostream& out) {
  stack<String> s;
  String left, right, op, currentToken;
  char token[300];

  while (!in.eof()) {
    in >> token;
    currentToken = String(token);

    if (in.eof()) {
      break;
    }

    if (currentToken == ";") {
 
      out << s.top();
      //      out << ";";
      out << std::endl;
      s = stack<String>();
    } 
    else if (currentToken == ")") {
      
      right = s.pop();
      op = s.pop();
      left = s.pop();
      s.push(left + right + op);
    }
    else 
      {
      if (currentToken != "(") {
	s.push(currentToken + ' ');
      }
    }
  }
}

void toAssembly(std::ifstream& in, std::ostream& out) {
  stack<String> s;
  String lhs, rhs, op, tempvar, currentToken;
  int tempN = 1;

  while (!in.eof()) {
    if (!in.eof()) {
      currentToken = getToken(in);
    } else {
      break;
    }

    if (currentToken == ";") {
      tempvar = "TMP" + intToString(tempN++);
      out << "   ST    " << tempvar << std::endl; 
      out << "=============================================" << std::endl; 
      tempN = 1;
    }

    if (!in.eof() && currentToken != "+" && currentToken != "-" && currentToken != "*" && currentToken != "/") {
      s.push(currentToken);
    } else if (!in.eof()) {
      rhs = s.pop();
      lhs = s.pop();

      out << "   LD    " << lhs << std::endl;

      op = getOperator(currentToken);
      out << op << rhs << std::endl;
            
      tempvar = "TMP" + intToString(tempN++);
      s.push(tempvar);

      out << "   ST    " << tempvar << std::endl;
    }
  }

   
}




String getOperator(const String& op)
{
  switch (op[0]) {
  case '+':
    return "   AD\t ";
    break;
  case '-':
    return "   SB\t ";
    break;
  case '*':
    return "   MU\t ";
    break;
  case '/':
    return "   DV\t ";
    break;
  default:
    return "    UNDEF\t";
  }
}

String intToString(int x){
  if (!x) {
    return "0";
  }

  int tens, ones;
  char tensChar, onesChar;
  char arr[2];

  tens = x / 10;
  ones = x % 10;

  tensChar = intToChar(tens);
  onesChar = intToChar(ones);

  arr[0] = tensChar;
  arr[1] = onesChar;

  String result(arr);

  return result;

}



char intToChar(int x) {
  switch(x) {
  case 0:
    return '0';
    break;
  case 1:
    return '1';
    break;
  case 2:
    return '2';
    break;
  case 3:
    return '3';
    break;
  case 4:
    return '4';
    break;
  case 5:
    return '5';
    break;
  case 6:
    return '6';
    break;
  case 7:
    return '7';
    break;
  case 8:
    return '8';
    break;
  case 9:
    return '9';
    break;
  default:
    return 0;
  }
}



String getToken(std::ifstream& in) {
  String result;
  char token = '\0';

  for (int i = 0; token != ' ' && !in.eof(); ++i) {
    in.get(token);

    if (token == ';') {
      return ";";
    } else if (token != ' ') {
      result += token;
    }
  }

  return result;
}



